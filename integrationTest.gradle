sourceSets {
    integrationTest {
        java.srcDir 'src/integrationTest/java'
        resources.srcDir 'src/integrationTest/resources'
    }
}

configurations {
    integrationTestImplementation.extendsFrom configurations.implementation
    integrationTestImplementation.extendsFrom configurations.testImplementation

    integrationTestCompileOnly.extendsFrom configurations.compileOnly

    integrationTestAnnotationProcessor.extendsFrom configurations.annotationProcessor

    integrationTestRuntime.extendsFrom configurations.runtime
    integrationTestRuntime.extendsFrom configurations.testRuntime
}

dependencies {
    integrationTestImplementation sourceSets.main.output
    integrationTestImplementation sourceSets.test.output
}

task runIntegrationTest(type: Test) {

    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the integration tests.'

    maxHeapSize = '1024m'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    binResultsDir = file("$buildDir/integration-test-results/binary/integration-test")

    reports {
        html.destination = file("$buildDir/reports/integration-test")
        junitXml.destination = file("$buildDir/integration-test-results")
    }

    mustRunAfter tasks.test
}

gradle.projectsEvaluated {
    def quickTasks = []

    gradle.rootProject.allprojects.each { project ->
        quickTasks.addAll(project.tasks.findAll { it.name == 'test' })
        quickTasks.addAll(project.tasks.withType(FindBugs))
        quickTasks.addAll(project.tasks.withType(Pmd))
    }

    quickTasks.each { task ->
        project.tasks.runIntegrationTest.mustRunAfter task
    }
}