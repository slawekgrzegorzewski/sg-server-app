scalar UUID
scalar BigDecimal
scalar LocalDate
scalar Currency

type Query {
    accounts: [Account!]!
    allIPRs: [IntellectualProperty!]!
    allTimeRecordCategories: [TimeRecordCategory!]!
    monthRevenueAndExpenseEntry(year: Int!, month: Int!): [RevenueAndExpenseEntry!]
    nonIPTimeRecords: [TimeRecord!]!
    simulateMortgage(mortgageCalculationParams: MortgageCalculationParams): [MortgageCalculationInstallment!]!
}

type Mutation{
    login(loginParameters:LoginParameters!): AuthenticationInfo!
    register(registrationParameters:RegistrationParameters!): MFAData!
    setupMFA(mfaParameters:MFAParameters!): Boolean!
    addRevenueAndExpenseEntry(input: RevenueAndExpenseEntryInput):RevenueAndExpenseEntry
    addIPR(input: IntellectualPropertyData): IntellectualProperty
    updateIPR(intellectualPropertyId: Int!, input: IntellectualPropertyData): IntellectualProperty
    deleteIPR(intellectualPropertyId: Int!): String!
    createTask(intellectualPropertyId: Int!, taskData: TaskData!): String!
    updateTask(taskId: Int!, taskData: TaskData!): String!
    deleteTask(taskId: Int!): String!
    createTimeRecord(timeRecordData: TimeRecordData!): String!
    updateTimeRecord(timeRecordId: Int!, timeRecordData: TimeRecordData!): String!
    assignCategoryToTimeRecord(timeRecordId: Int!, timeRecordCategoryId: Int): String!
    deleteTimeRecord(timeRecordId: Int!): String!
    createTimeRecordCategory(name: String!): TimeRecordCategory!
    updateTimeRecordCategory(timeRecordId: Int!, name: String!): String!
    deleteTimeRecordCategory(timeRecordId:Int!): String!
}

input LoginParameters{
    login:String!
    password: String!
    otp:String!
}

input RegistrationParameters{
    firstName:String!
    lastName:String!
    login:String!
    email: String!
    password: String!
    repeatedPassword: String!
}

input MFAParameters{
    login: String!
    password: String!
    otp: String!
}

input MortgageCalculationParams {
    mortgageAmount: BigDecimal!,
    repaymentStart: LocalDate!,
    rate: BigDecimal!,
    wibor: BigDecimal!,
    numberOfInstallments: Int!,
    overpaymentMonthlyBudget: BigDecimal!,
    overpaymentYearlyBudget: BigDecimal!
}

type MortgageCalculationInstallment {
    paymentFrom: LocalDate!
    paymentTo: LocalDate!,
    remainingCapitalAtTheBeginning: BigDecimal!,
    installment: BigDecimal!,
    repaidCapital: BigDecimal!,
    paidInterest: BigDecimal!,
    overpayment: BigDecimal!
}

input IntellectualPropertyData{
    description: String!
}

input TaskData{
    coAuthors: String!,
    description: String!
}

enum AssignmentAction {
    NOP, ASSIGN, UNASSIGN
}

input TimeRecordData {
    taskId:Int,
    date:LocalDate!,
    numberOfHours:BigDecimal!,
    description:String!,
    assignmentAction:AssignmentAction!
}

type User {
    name: String!,
    email: String!,
    roles: [String!]!
    defaultDomainId: Int!,
    domains: [DomainSimple!]!
}

type AuthenticationInfo {
    jwt: String!
    user: User!
}

type MFAData {
    mfaCode: String!
    qrLink: String!
}

type DomainSimple {
    id: Int!,
    name: String!
}

type IntellectualProperty {
    id: Int!,
    description: String!,
    tasks: [Task!],
    domain: DomainSimple!
}

type Task {
    id: Int!,
    attachments: [String!],
    coAuthors: String!,
    description: String!,
    timeRecords: [TimeRecord!]
}

type TimeRecord {
    id: Int!,
    date: LocalDate!,
    numberOfHours: BigDecimal!,
    description: String,
    timeRecordCategory: TimeRecordCategory,
    domain: DomainSimple!
}

type TimeRecordCategory {
    id: Int!,
    name: String!,
    domain: DomainSimple!
}

type RevenueAndExpenseEntry {
    publicId: UUID!,
    domain: DomainSimple!,
    entryOrder: Int!,
    entryDate: LocalDate!,
    accountingDocumentNumber: String!,
    counterparty: String!,
    counterpartyAddress: String!,
    description: String!,
    providedGoodsAndServicesValue: BigDecimal!,
    otherIncome: BigDecimal!,
    totalIncome: BigDecimal!,
    purchasedGoodsAndMaterialsValue: BigDecimal!,
    additionalCostOfPurchase: BigDecimal!,
    remunerationInCashOrInKind: BigDecimal!,
    otherExpense: BigDecimal!,
    totalExpense: BigDecimal!,
    comments: String!
}

input RevenueAndExpenseEntryInput {
    publicId: UUID,
    entryOrder: Int!,
    entryDate: LocalDate!,
    accountingDocumentNumber: String!,
    counterparty: String!,
    counterpartyAddress: String!,
    description: String!,
    providedGoodsAndServicesValue: BigDecimal!,
    otherIncome: BigDecimal!,
    totalIncome: BigDecimal!,
    purchasedGoodsAndMaterialsValue: BigDecimal!,
    additionalCostOfPurchase: BigDecimal!,
    remunerationInCashOrInKind: BigDecimal!,
    otherExpense: BigDecimal!,
    totalExpense: BigDecimal!,
    comments: String!
}

type Account {
    id:Int!,
    name:String!,
    currency:Currency!,
    currentBalance:BigDecimal!,
    creditLimit:BigDecimal!,
    balanceIndex:Int,
    visible:Boolean!,
    bankAccount:BankAccount,
    domain:DomainSimple,
}

type BankAccount {
    id: Int!,
    iban: String!,
    currency: Currency!,
    owner: String!,
    product: String,
    bic: String,
    externalId: String!,
    domain: DomainSimple!,
}