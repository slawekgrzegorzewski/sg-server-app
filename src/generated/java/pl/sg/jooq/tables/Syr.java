/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Syr extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.syr</code>
     */
    public static final Syr SYR = new Syr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.syr.dtype</code>.
     */
    public final TableField<Record, String> DTYPE = createField(DSL.name("dtype"), SQLDataType.VARCHAR(31).nullable(false), this, "");

    /**
     * The column <code>public.syr.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.syr.year</code>.
     */
    public final TableField<Record, String> YEAR = createField(DSL.name("year"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.syr.average</code>.
     */
    public final TableField<Record, Integer> AVERAGE = createField(DSL.name("average"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.average_auxiliary_pioneers</code>.
     */
    public final TableField<Record, Integer> AVERAGE_AUXILIARY_PIONEERS = createField(DSL.name("average_auxiliary_pioneers"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.average_bible_studies</code>.
     */
    public final TableField<Record, Integer> AVERAGE_BIBLE_STUDIES = createField(DSL.name("average_bible_studies"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.average_pioneers</code>.
     */
    public final TableField<Record, Integer> AVERAGE_PIONEERS = createField(DSL.name("average_pioneers"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.average_previous_year</code>.
     */
    public final TableField<Record, Integer> AVERAGE_PREVIOUS_YEAR = createField(DSL.name("average_previous_year"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.baptized</code>.
     */
    public final TableField<Record, Integer> BAPTIZED = createField(DSL.name("baptized"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.memorial_attendance</code>.
     */
    public final TableField<Record, Integer> MEMORIAL_ATTENDANCE = createField(DSL.name("memorial_attendance"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.number_of_congregations</code>.
     */
    public final TableField<Record, Integer> NUMBER_OF_CONGREGATIONS = createField(DSL.name("number_of_congregations"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.peak</code>.
     */
    public final TableField<Record, Integer> PEAK = createField(DSL.name("peak"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.percent_increase</code>.
     */
    public final TableField<Record, Integer> PERCENT_INCREASE = createField(DSL.name("percent_increase"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.population</code>.
     */
    public final TableField<Record, Integer> POPULATION = createField(DSL.name("population"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.ratio1publisher_to</code>.
     */
    public final TableField<Record, Integer> RATIO1PUBLISHER_TO = createField(DSL.name("ratio1publisher_to"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.total_hours</code>.
     */
    public final TableField<Record, Integer> TOTAL_HOURS = createField(DSL.name("total_hours"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.number_of_countries</code>.
     */
    public final TableField<Record, Integer> NUMBER_OF_COUNTRIES = createField(DSL.name("number_of_countries"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.syr.country_id</code>.
     */
    public final TableField<Record, Integer> COUNTRY_ID = createField(DSL.name("country_id"), SQLDataType.INTEGER, this, "");

    private Syr(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Syr(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.syr</code> table reference
     */
    public Syr(String alias) {
        this(DSL.name(alias), SYR);
    }

    /**
     * Create an aliased <code>public.syr</code> table reference
     */
    public Syr(Name alias) {
        this(alias, SYR);
    }

    /**
     * Create a <code>public.syr</code> table reference
     */
    public Syr() {
        this(DSL.name("syr"), null);
    }

    public <O extends Record> Syr(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SYR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.SYR_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.SYR__FK_COUNTRY);
    }

    private transient Country _country;

    /**
     * Get the implicit join path to the <code>public.country</code> table.
     */
    public Country country() {
        if (_country == null)
            _country = new Country(this, Keys.SYR__FK_COUNTRY);

        return _country;
    }

    @Override
    public Syr as(String alias) {
        return new Syr(DSL.name(alias), this);
    }

    @Override
    public Syr as(Name alias) {
        return new Syr(alias, this);
    }

    @Override
    public Syr as(Table<?> alias) {
        return new Syr(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Syr rename(String name) {
        return new Syr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Syr rename(Name name) {
        return new Syr(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Syr rename(Table<?> name) {
        return new Syr(name.getQualifiedName(), null);
    }
}
