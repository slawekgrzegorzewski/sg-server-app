/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CheckerTaskSteps extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.checker_task_steps</code>
     */
    public static final CheckerTaskSteps CHECKER_TASK_STEPS = new CheckerTaskSteps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.checker_task_steps.checker_task_id</code>.
     */
    public final TableField<Record, Integer> CHECKER_TASK_ID = createField(DSL.name("checker_task_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.checker_task_steps.steps_id</code>.
     */
    public final TableField<Record, Integer> STEPS_ID = createField(DSL.name("steps_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private CheckerTaskSteps(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private CheckerTaskSteps(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.checker_task_steps</code> table reference
     */
    public CheckerTaskSteps(String alias) {
        this(DSL.name(alias), CHECKER_TASK_STEPS);
    }

    /**
     * Create an aliased <code>public.checker_task_steps</code> table reference
     */
    public CheckerTaskSteps(Name alias) {
        this(alias, CHECKER_TASK_STEPS);
    }

    /**
     * Create a <code>public.checker_task_steps</code> table reference
     */
    public CheckerTaskSteps() {
        this(DSL.name("checker_task_steps"), null);
    }

    public <O extends Record> CheckerTaskSteps(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, CHECKER_TASK_STEPS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_7Q5BGTQSCO1VT3ASO3H7MATK1, Keys.UK_CHECKER_STEP);
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.CHECKER_TASK_STEPS__FK_CHECKER_TASK, Keys.CHECKER_TASK_STEPS__FK_CHECKER_STEP);
    }

    private transient CheckerTask _checkerTask;
    private transient CheckerStep _checkerStep;

    /**
     * Get the implicit join path to the <code>public.checker_task</code> table.
     */
    public CheckerTask checkerTask() {
        if (_checkerTask == null)
            _checkerTask = new CheckerTask(this, Keys.CHECKER_TASK_STEPS__FK_CHECKER_TASK);

        return _checkerTask;
    }

    /**
     * Get the implicit join path to the <code>public.checker_step</code> table.
     */
    public CheckerStep checkerStep() {
        if (_checkerStep == null)
            _checkerStep = new CheckerStep(this, Keys.CHECKER_TASK_STEPS__FK_CHECKER_STEP);

        return _checkerStep;
    }

    @Override
    public CheckerTaskSteps as(String alias) {
        return new CheckerTaskSteps(DSL.name(alias), this);
    }

    @Override
    public CheckerTaskSteps as(Name alias) {
        return new CheckerTaskSteps(alias, this);
    }

    @Override
    public CheckerTaskSteps as(Table<?> alias) {
        return new CheckerTaskSteps(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CheckerTaskSteps rename(String name) {
        return new CheckerTaskSteps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CheckerTaskSteps rename(Name name) {
        return new CheckerTaskSteps(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CheckerTaskSteps rename(Table<?> name) {
        return new CheckerTaskSteps(name.getQualifiedName(), null);
    }
}
