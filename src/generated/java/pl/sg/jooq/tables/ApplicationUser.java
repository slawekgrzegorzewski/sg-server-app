/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApplicationUser extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.application_user</code>
     */
    public static final ApplicationUser APPLICATION_USER = new ApplicationUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.application_user.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.application_user.email</code>.
     */
    public final TableField<Record, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.application_user.first_name</code>.
     */
    public final TableField<Record, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.application_user.is_using2fa</code>.
     */
    public final TableField<Record, Boolean> IS_USING2FA = createField(DSL.name("is_using2fa"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.application_user.last_name</code>.
     */
    public final TableField<Record, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.application_user.login</code>.
     */
    public final TableField<Record, String> LOGIN = createField(DSL.name("login"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.application_user.password</code>.
     */
    public final TableField<Record, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.application_user.secret</code>.
     */
    public final TableField<Record, String> SECRET = createField(DSL.name("secret"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.application_user.default_domain_id</code>.
     */
    public final TableField<Record, Integer> DEFAULT_DOMAIN_ID = createField(DSL.name("default_domain_id"), SQLDataType.INTEGER, this, "");

    private ApplicationUser(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ApplicationUser(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.application_user</code> table reference
     */
    public ApplicationUser(String alias) {
        this(DSL.name(alias), APPLICATION_USER);
    }

    /**
     * Create an aliased <code>public.application_user</code> table reference
     */
    public ApplicationUser(Name alias) {
        this(alias, APPLICATION_USER);
    }

    /**
     * Create a <code>public.application_user</code> table reference
     */
    public ApplicationUser() {
        this(DSL.name("application_user"), null);
    }

    public <O extends Record> ApplicationUser(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, APPLICATION_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.APPLICATION_USER_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.APPLICATION_USER__FK_DOMAIN);
    }

    private transient Domain _domain;

    /**
     * Get the implicit join path to the <code>public.domain</code> table.
     */
    public Domain domain() {
        if (_domain == null)
            _domain = new Domain(this, Keys.APPLICATION_USER__FK_DOMAIN);

        return _domain;
    }

    @Override
    public ApplicationUser as(String alias) {
        return new ApplicationUser(DSL.name(alias), this);
    }

    @Override
    public ApplicationUser as(Name alias) {
        return new ApplicationUser(alias, this);
    }

    @Override
    public ApplicationUser as(Table<?> alias) {
        return new ApplicationUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationUser rename(String name) {
        return new ApplicationUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationUser rename(Name name) {
        return new ApplicationUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationUser rename(Table<?> name) {
        return new ApplicationUser(name.getQualifiedName(), null);
    }
}
