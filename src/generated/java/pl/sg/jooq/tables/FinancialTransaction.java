/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FinancialTransaction extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.financial_transaction</code>
     */
    public static final FinancialTransaction FINANCIAL_TRANSACTION = new FinancialTransaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.financial_transaction.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.financial_transaction.conversion_rate</code>.
     */
    public final TableField<Record, BigDecimal> CONVERSION_RATE = createField(DSL.name("conversion_rate"), SQLDataType.NUMERIC(19, 2), this, "");

    /**
     * The column <code>public.financial_transaction.credit</code>.
     */
    public final TableField<Record, BigDecimal> CREDIT = createField(DSL.name("credit"), SQLDataType.NUMERIC(19, 2), this, "");

    /**
     * The column <code>public.financial_transaction.debit</code>.
     */
    public final TableField<Record, BigDecimal> DEBIT = createField(DSL.name("debit"), SQLDataType.NUMERIC(19, 2), this, "");

    /**
     * The column <code>public.financial_transaction.description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>public.financial_transaction.time_of_transaction</code>.
     */
    public final TableField<Record, LocalDateTime> TIME_OF_TRANSACTION = createField(DSL.name("time_of_transaction"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.financial_transaction.destination_id</code>.
     */
    public final TableField<Record, Integer> DESTINATION_ID = createField(DSL.name("destination_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.financial_transaction.source_id</code>.
     */
    public final TableField<Record, Integer> SOURCE_ID = createField(DSL.name("source_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.financial_transaction.fee</code>.
     */
    public final TableField<Record, BigDecimal> FEE = createField(DSL.name("fee"), SQLDataType.NUMERIC(19, 2), this, "");

    /**
     * The column <code>public.financial_transaction.other_fee</code>.
     */
    public final TableField<Record, BigDecimal> OTHER_FEE = createField(DSL.name("other_fee"), SQLDataType.NUMERIC(19, 2), this, "");

    /**
     * The column <code>public.financial_transaction.fee_currency</code>.
     */
    public final TableField<Record, String> FEE_CURRENCY = createField(DSL.name("fee_currency"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.financial_transaction.other_fee_currency</code>.
     */
    public final TableField<Record, String> OTHER_FEE_CURRENCY = createField(DSL.name("other_fee_currency"), SQLDataType.VARCHAR(255), this, "");

    private FinancialTransaction(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private FinancialTransaction(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.financial_transaction</code> table
     * reference
     */
    public FinancialTransaction(String alias) {
        this(DSL.name(alias), FINANCIAL_TRANSACTION);
    }

    /**
     * Create an aliased <code>public.financial_transaction</code> table
     * reference
     */
    public FinancialTransaction(Name alias) {
        this(alias, FINANCIAL_TRANSACTION);
    }

    /**
     * Create a <code>public.financial_transaction</code> table reference
     */
    public FinancialTransaction() {
        this(DSL.name("financial_transaction"), null);
    }

    public <O extends Record> FinancialTransaction(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, FINANCIAL_TRANSACTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.FINANCIAL_TRANSACTION_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FINANCIAL_TRANSACTION__FK_DESTINATION_ACCOUNT, Keys.FINANCIAL_TRANSACTION__FK_SOURCE_ACCOUNT);
    }

    private transient Account _fkDestinationAccount;
    private transient Account _fkSourceAccount;

    /**
     * Get the implicit join path to the <code>public.account</code> table, via
     * the <code>fk_destination_account</code> key.
     */
    public Account fkDestinationAccount() {
        if (_fkDestinationAccount == null)
            _fkDestinationAccount = new Account(this, Keys.FINANCIAL_TRANSACTION__FK_DESTINATION_ACCOUNT);

        return _fkDestinationAccount;
    }

    /**
     * Get the implicit join path to the <code>public.account</code> table, via
     * the <code>fk_source_account</code> key.
     */
    public Account fkSourceAccount() {
        if (_fkSourceAccount == null)
            _fkSourceAccount = new Account(this, Keys.FINANCIAL_TRANSACTION__FK_SOURCE_ACCOUNT);

        return _fkSourceAccount;
    }

    @Override
    public FinancialTransaction as(String alias) {
        return new FinancialTransaction(DSL.name(alias), this);
    }

    @Override
    public FinancialTransaction as(Name alias) {
        return new FinancialTransaction(alias, this);
    }

    @Override
    public FinancialTransaction as(Table<?> alias) {
        return new FinancialTransaction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialTransaction rename(String name) {
        return new FinancialTransaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialTransaction rename(Name name) {
        return new FinancialTransaction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialTransaction rename(Table<?> name) {
        return new FinancialTransaction(name.getQualifiedName(), null);
    }
}
