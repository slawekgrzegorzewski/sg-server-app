/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NodrigenAccess extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.nodrigen_access</code>
     */
    public static final NodrigenAccess NODRIGEN_ACCESS = new NodrigenAccess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.nodrigen_access.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.nodrigen_access.access_expires</code>.
     */
    public final TableField<Record, Long> ACCESS_EXPIRES = createField(DSL.name("access_expires"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.nodrigen_access.access_expires_at</code>.
     */
    public final TableField<Record, LocalDateTime> ACCESS_EXPIRES_AT = createField(DSL.name("access_expires_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.nodrigen_access.access_token</code>.
     */
    public final TableField<Record, String> ACCESS_TOKEN = createField(DSL.name("access_token"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nodrigen_access.archived_at</code>.
     */
    public final TableField<Record, LocalDateTime> ARCHIVED_AT = createField(DSL.name("archived_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.nodrigen_access.refresh_expires</code>.
     */
    public final TableField<Record, Long> REFRESH_EXPIRES = createField(DSL.name("refresh_expires"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.nodrigen_access.refresh_expires_at</code>.
     */
    public final TableField<Record, LocalDateTime> REFRESH_EXPIRES_AT = createField(DSL.name("refresh_expires_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.nodrigen_access.refresh_token</code>.
     */
    public final TableField<Record, String> REFRESH_TOKEN = createField(DSL.name("refresh_token"), SQLDataType.CLOB, this, "");

    private NodrigenAccess(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private NodrigenAccess(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.nodrigen_access</code> table reference
     */
    public NodrigenAccess(String alias) {
        this(DSL.name(alias), NODRIGEN_ACCESS);
    }

    /**
     * Create an aliased <code>public.nodrigen_access</code> table reference
     */
    public NodrigenAccess(Name alias) {
        this(alias, NODRIGEN_ACCESS);
    }

    /**
     * Create a <code>public.nodrigen_access</code> table reference
     */
    public NodrigenAccess() {
        this(DSL.name("nodrigen_access"), null);
    }

    public <O extends Record> NodrigenAccess(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, NODRIGEN_ACCESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.NODRIGEN_ACCESS_PKEY;
    }

    @Override
    public NodrigenAccess as(String alias) {
        return new NodrigenAccess(DSL.name(alias), this);
    }

    @Override
    public NodrigenAccess as(Name alias) {
        return new NodrigenAccess(alias, this);
    }

    @Override
    public NodrigenAccess as(Table<?> alias) {
        return new NodrigenAccess(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NodrigenAccess rename(String name) {
        return new NodrigenAccess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NodrigenAccess rename(Name name) {
        return new NodrigenAccess(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NodrigenAccess rename(Table<?> name) {
        return new NodrigenAccess(name.getQualifiedName(), null);
    }
}
