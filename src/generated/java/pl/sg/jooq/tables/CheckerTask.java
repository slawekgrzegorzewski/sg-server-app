/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CheckerTask extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.checker_task</code>
     */
    public static final CheckerTask CHECKER_TASK = new CheckerTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.checker_task.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.checker_task.description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.checker_task.interval</code>.
     */
    public final TableField<Record, BigInteger> INTERVAL = createField(DSL.name("interval"), SQLDataType.DECIMAL_INTEGER(21), this, "");

    /**
     * The column <code>public.checker_task.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.checker_task.next_run</code>.
     */
    public final TableField<Record, LocalDateTime> NEXT_RUN = createField(DSL.name("next_run"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.checker_task.for_user_id</code>.
     */
    public final TableField<Record, Integer> FOR_USER_ID = createField(DSL.name("for_user_id"), SQLDataType.INTEGER, this, "");

    private CheckerTask(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private CheckerTask(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.checker_task</code> table reference
     */
    public CheckerTask(String alias) {
        this(DSL.name(alias), CHECKER_TASK);
    }

    /**
     * Create an aliased <code>public.checker_task</code> table reference
     */
    public CheckerTask(Name alias) {
        this(alias, CHECKER_TASK);
    }

    /**
     * Create a <code>public.checker_task</code> table reference
     */
    public CheckerTask() {
        this(DSL.name("checker_task"), null);
    }

    public <O extends Record> CheckerTask(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, CHECKER_TASK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.CHECKER_TASK_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.CHECKER_TASK__FK_APPLICATION_USER);
    }

    private transient ApplicationUser _applicationUser;

    /**
     * Get the implicit join path to the <code>public.application_user</code>
     * table.
     */
    public ApplicationUser applicationUser() {
        if (_applicationUser == null)
            _applicationUser = new ApplicationUser(this, Keys.CHECKER_TASK__FK_APPLICATION_USER);

        return _applicationUser;
    }

    @Override
    public CheckerTask as(String alias) {
        return new CheckerTask(DSL.name(alias), this);
    }

    @Override
    public CheckerTask as(Name alias) {
        return new CheckerTask(alias, this);
    }

    @Override
    public CheckerTask as(Table<?> alias) {
        return new CheckerTask(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CheckerTask rename(String name) {
        return new CheckerTask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CheckerTask rename(Name name) {
        return new CheckerTask(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CheckerTask rename(Table<?> name) {
        return new CheckerTask(name.getQualifiedName(), null);
    }
}
