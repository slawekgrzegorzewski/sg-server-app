/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApplicationUserRoles extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.application_user_roles</code>
     */
    public static final ApplicationUserRoles APPLICATION_USER_ROLES = new ApplicationUserRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>public.application_user_roles.application_user_id</code>.
     */
    public final TableField<Record, Integer> APPLICATION_USER_ID = createField(DSL.name("application_user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.application_user_roles.roles</code>.
     */
    public final TableField<Record, String> ROLES = createField(DSL.name("roles"), SQLDataType.VARCHAR(255), this, "");

    private ApplicationUserRoles(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ApplicationUserRoles(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.application_user_roles</code> table
     * reference
     */
    public ApplicationUserRoles(String alias) {
        this(DSL.name(alias), APPLICATION_USER_ROLES);
    }

    /**
     * Create an aliased <code>public.application_user_roles</code> table
     * reference
     */
    public ApplicationUserRoles(Name alias) {
        this(alias, APPLICATION_USER_ROLES);
    }

    /**
     * Create a <code>public.application_user_roles</code> table reference
     */
    public ApplicationUserRoles() {
        this(DSL.name("application_user_roles"), null);
    }

    public <O extends Record> ApplicationUserRoles(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, APPLICATION_USER_ROLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.APPLICATION_USER_ROLES__FK_APPLICATION_USER);
    }

    private transient ApplicationUser _applicationUser;

    /**
     * Get the implicit join path to the <code>public.application_user</code>
     * table.
     */
    public ApplicationUser applicationUser() {
        if (_applicationUser == null)
            _applicationUser = new ApplicationUser(this, Keys.APPLICATION_USER_ROLES__FK_APPLICATION_USER);

        return _applicationUser;
    }

    @Override
    public ApplicationUserRoles as(String alias) {
        return new ApplicationUserRoles(DSL.name(alias), this);
    }

    @Override
    public ApplicationUserRoles as(Name alias) {
        return new ApplicationUserRoles(alias, this);
    }

    @Override
    public ApplicationUserRoles as(Table<?> alias) {
        return new ApplicationUserRoles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationUserRoles rename(String name) {
        return new ApplicationUserRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationUserRoles rename(Name name) {
        return new ApplicationUserRoles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationUserRoles rename(Table<?> name) {
        return new ApplicationUserRoles(name.getQualifiedName(), null);
    }
}
