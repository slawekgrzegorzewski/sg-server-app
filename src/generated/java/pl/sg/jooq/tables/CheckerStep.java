/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CheckerStep extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.checker_step</code>
     */
    public static final CheckerStep CHECKER_STEP = new CheckerStep();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.checker_step.dtype</code>.
     */
    public final TableField<Record, String> DTYPE = createField(DSL.name("dtype"), SQLDataType.VARCHAR(31).nullable(false), this, "");

    /**
     * The column <code>public.checker_step.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.checker_step.description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.checker_step.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.checker_step.step_order</code>.
     */
    public final TableField<Record, Integer> STEP_ORDER = createField(DSL.name("step_order"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.checker_step.attribute</code>.
     */
    public final TableField<Record, String> ATTRIBUTE = createField(DSL.name("attribute"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.checker_step.attribute_variable_name_in_expression</code>.
     */
    public final TableField<Record, String> ATTRIBUTE_VARIABLE_NAME_IN_EXPRESSION = createField(DSL.name("attribute_variable_name_in_expression"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.checker_step.css_query</code>.
     */
    public final TableField<Record, String> CSS_QUERY = createField(DSL.name("css_query"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.checker_step.operation_expression</code>.
     */
    public final TableField<Record, String> OPERATION_EXPRESSION = createField(DSL.name("operation_expression"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.checker_step.page_content_variable</code>.
     */
    public final TableField<Record, String> PAGE_CONTENT_VARIABLE = createField(DSL.name("page_content_variable"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.checker_step.result_variable</code>.
     */
    public final TableField<Record, String> RESULT_VARIABLE = createField(DSL.name("result_variable"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.checker_step.element_variable_name_in_expression</code>.
     */
    public final TableField<Record, String> ELEMENT_VARIABLE_NAME_IN_EXPRESSION = createField(DSL.name("element_variable_name_in_expression"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.checker_step.elements_variable</code>.
     */
    public final TableField<Record, String> ELEMENTS_VARIABLE = createField(DSL.name("elements_variable"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.checker_step.filter_expression</code>.
     */
    public final TableField<Record, String> FILTER_EXPRESSION = createField(DSL.name("filter_expression"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.checker_step.page_url_expression</code>.
     */
    public final TableField<Record, String> PAGE_URL_EXPRESSION = createField(DSL.name("page_url_expression"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.checker_step.variable_name</code>.
     */
    public final TableField<Record, String> VARIABLE_NAME = createField(DSL.name("variable_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.checker_step.element_index</code>.
     */
    public final TableField<Record, Integer> ELEMENT_INDEX = createField(DSL.name("element_index"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.checker_step.email_header</code>.
     */
    public final TableField<Record, String> EMAIL_HEADER = createField(DSL.name("email_header"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.checker_step.email_title</code>.
     */
    public final TableField<Record, String> EMAIL_TITLE = createField(DSL.name("email_title"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.checker_step.result_variable_name</code>.
     */
    public final TableField<Record, String> RESULT_VARIABLE_NAME = createField(DSL.name("result_variable_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.checker_step.send_email_notification</code>.
     */
    public final TableField<Record, Boolean> SEND_EMAIL_NOTIFICATION = createField(DSL.name("send_email_notification"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.checker_step.get_result_from_variable</code>.
     */
    public final TableField<Record, String> GET_RESULT_FROM_VARIABLE = createField(DSL.name("get_result_from_variable"), SQLDataType.VARCHAR(255), this, "");

    private CheckerStep(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private CheckerStep(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.checker_step</code> table reference
     */
    public CheckerStep(String alias) {
        this(DSL.name(alias), CHECKER_STEP);
    }

    /**
     * Create an aliased <code>public.checker_step</code> table reference
     */
    public CheckerStep(Name alias) {
        this(alias, CHECKER_STEP);
    }

    /**
     * Create a <code>public.checker_step</code> table reference
     */
    public CheckerStep() {
        this(DSL.name("checker_step"), null);
    }

    public <O extends Record> CheckerStep(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, CHECKER_STEP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.CHECKER_STEP_PKEY;
    }

    @Override
    public CheckerStep as(String alias) {
        return new CheckerStep(DSL.name(alias), this);
    }

    @Override
    public CheckerStep as(Name alias) {
        return new CheckerStep(alias, this);
    }

    @Override
    public CheckerStep as(Table<?> alias) {
        return new CheckerStep(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CheckerStep rename(String name) {
        return new CheckerStep(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CheckerStep rename(Name name) {
        return new CheckerStep(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CheckerStep rename(Table<?> name) {
        return new CheckerStep(name.getQualifiedName(), null);
    }
}
