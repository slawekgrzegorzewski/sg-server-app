/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Income extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.income</code>
     */
    public static final Income INCOME = new Income();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.income.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.income.amount</code>.
     */
    public final TableField<Record, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(19, 2).nullable(false), this, "");

    /**
     * The column <code>public.income.currency</code>.
     */
    public final TableField<Record, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.income.description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(2000).nullable(false), this, "");

    /**
     * The column <code>public.income.income_date</code>.
     */
    public final TableField<Record, LocalDate> INCOME_DATE = createField(DSL.name("income_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.income.billing_period_id</code>.
     */
    public final TableField<Record, Integer> BILLING_PERIOD_ID = createField(DSL.name("billing_period_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.income.category_id</code>.
     */
    public final TableField<Record, Integer> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Income(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Income(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.income</code> table reference
     */
    public Income(String alias) {
        this(DSL.name(alias), INCOME);
    }

    /**
     * Create an aliased <code>public.income</code> table reference
     */
    public Income(Name alias) {
        this(alias, INCOME);
    }

    /**
     * Create a <code>public.income</code> table reference
     */
    public Income() {
        this(DSL.name("income"), null);
    }

    public <O extends Record> Income(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, INCOME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.INCOME_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.INCOME__FK_BILLING_PERIOD, Keys.INCOME__FK_CATEGORY);
    }

    private transient BillingPeriod _billingPeriod;
    private transient Category _category;

    /**
     * Get the implicit join path to the <code>public.billing_period</code>
     * table.
     */
    public BillingPeriod billingPeriod() {
        if (_billingPeriod == null)
            _billingPeriod = new BillingPeriod(this, Keys.INCOME__FK_BILLING_PERIOD);

        return _billingPeriod;
    }

    /**
     * Get the implicit join path to the <code>public.category</code> table.
     */
    public Category category() {
        if (_category == null)
            _category = new Category(this, Keys.INCOME__FK_CATEGORY);

        return _category;
    }

    @Override
    public Income as(String alias) {
        return new Income(DSL.name(alias), this);
    }

    @Override
    public Income as(Name alias) {
        return new Income(alias, this);
    }

    @Override
    public Income as(Table<?> alias) {
        return new Income(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Income rename(String name) {
        return new Income(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Income rename(Name name) {
        return new Income(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Income rename(Table<?> name) {
        return new Income(name.getQualifiedName(), null);
    }
}
