/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PerformedService extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.performed_service</code>
     */
    public static final PerformedService PERFORMED_SERVICE = new PerformedService();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.performed_service.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.performed_service.currency</code>.
     */
    public final TableField<Record, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.performed_service.date</code>.
     */
    public final TableField<Record, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.performed_service.price</code>.
     */
    public final TableField<Record, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(19, 2).nullable(false), this, "");

    /**
     * The column <code>public.performed_service.client_id</code>.
     */
    public final TableField<Record, Integer> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.performed_service.domain_id</code>.
     */
    public final TableField<Record, Integer> DOMAIN_ID = createField(DSL.name("domain_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.performed_service.service_id</code>.
     */
    public final TableField<Record, Integer> SERVICE_ID = createField(DSL.name("service_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PerformedService(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PerformedService(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.performed_service</code> table reference
     */
    public PerformedService(String alias) {
        this(DSL.name(alias), PERFORMED_SERVICE);
    }

    /**
     * Create an aliased <code>public.performed_service</code> table reference
     */
    public PerformedService(Name alias) {
        this(alias, PERFORMED_SERVICE);
    }

    /**
     * Create a <code>public.performed_service</code> table reference
     */
    public PerformedService() {
        this(DSL.name("performed_service"), null);
    }

    public <O extends Record> PerformedService(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PERFORMED_SERVICE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PERFORMED_SERVICE_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.PERFORMED_SERVICE__FK_CLIENT, Keys.PERFORMED_SERVICE__FK_DOMAIN, Keys.PERFORMED_SERVICE__FK_SERVICE);
    }

    private transient Client _client;
    private transient Domain _domain;
    private transient Service _service;

    /**
     * Get the implicit join path to the <code>public.client</code> table.
     */
    public Client client() {
        if (_client == null)
            _client = new Client(this, Keys.PERFORMED_SERVICE__FK_CLIENT);

        return _client;
    }

    /**
     * Get the implicit join path to the <code>public.domain</code> table.
     */
    public Domain domain() {
        if (_domain == null)
            _domain = new Domain(this, Keys.PERFORMED_SERVICE__FK_DOMAIN);

        return _domain;
    }

    /**
     * Get the implicit join path to the <code>public.service</code> table.
     */
    public Service service() {
        if (_service == null)
            _service = new Service(this, Keys.PERFORMED_SERVICE__FK_SERVICE);

        return _service;
    }

    @Override
    public PerformedService as(String alias) {
        return new PerformedService(DSL.name(alias), this);
    }

    @Override
    public PerformedService as(Name alias) {
        return new PerformedService(alias, this);
    }

    @Override
    public PerformedService as(Table<?> alias) {
        return new PerformedService(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformedService rename(String name) {
        return new PerformedService(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformedService rename(Name name) {
        return new PerformedService(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformedService rename(Table<?> name) {
        return new PerformedService(name.getQualifiedName(), null);
    }
}
