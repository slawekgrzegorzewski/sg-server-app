/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PerformedServicePayment extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.performed_service_payment</code>
     */
    public static final PerformedServicePayment PERFORMED_SERVICE_PAYMENT = new PerformedServicePayment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.performed_service_payment.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.performed_service_payment.price</code>.
     */
    public final TableField<Record, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(19, 2).nullable(false), this, "");

    /**
     * The column
     * <code>public.performed_service_payment.client_payment_id</code>.
     */
    public final TableField<Record, Integer> CLIENT_PAYMENT_ID = createField(DSL.name("client_payment_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.performed_service_payment.performed_service_id</code>.
     */
    public final TableField<Record, Integer> PERFORMED_SERVICE_ID = createField(DSL.name("performed_service_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PerformedServicePayment(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PerformedServicePayment(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.performed_service_payment</code> table
     * reference
     */
    public PerformedServicePayment(String alias) {
        this(DSL.name(alias), PERFORMED_SERVICE_PAYMENT);
    }

    /**
     * Create an aliased <code>public.performed_service_payment</code> table
     * reference
     */
    public PerformedServicePayment(Name alias) {
        this(alias, PERFORMED_SERVICE_PAYMENT);
    }

    /**
     * Create a <code>public.performed_service_payment</code> table reference
     */
    public PerformedServicePayment() {
        this(DSL.name("performed_service_payment"), null);
    }

    public <O extends Record> PerformedServicePayment(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PERFORMED_SERVICE_PAYMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PERFORMED_SERVICE_PAYMENT_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.PERFORMED_SERVICE_PAYMENT__FK_CLIENT_PAYMENT, Keys.PERFORMED_SERVICE_PAYMENT__FK_PERFORMED_SERVICE);
    }

    private transient ClientPayment _clientPayment;
    private transient PerformedService _performedService;

    /**
     * Get the implicit join path to the <code>public.client_payment</code>
     * table.
     */
    public ClientPayment clientPayment() {
        if (_clientPayment == null)
            _clientPayment = new ClientPayment(this, Keys.PERFORMED_SERVICE_PAYMENT__FK_CLIENT_PAYMENT);

        return _clientPayment;
    }

    /**
     * Get the implicit join path to the <code>public.performed_service</code>
     * table.
     */
    public PerformedService performedService() {
        if (_performedService == null)
            _performedService = new PerformedService(this, Keys.PERFORMED_SERVICE_PAYMENT__FK_PERFORMED_SERVICE);

        return _performedService;
    }

    @Override
    public PerformedServicePayment as(String alias) {
        return new PerformedServicePayment(DSL.name(alias), this);
    }

    @Override
    public PerformedServicePayment as(Name alias) {
        return new PerformedServicePayment(alias, this);
    }

    @Override
    public PerformedServicePayment as(Table<?> alias) {
        return new PerformedServicePayment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformedServicePayment rename(String name) {
        return new PerformedServicePayment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformedServicePayment rename(Name name) {
        return new PerformedServicePayment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformedServicePayment rename(Table<?> name) {
        return new PerformedServicePayment(name.getQualifiedName(), null);
    }
}
