/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KpirEntry extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.kpir_entry</code>
     */
    public static final KpirEntry KPIR_ENTRY = new KpirEntry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.kpir_entry.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.kpir_entry.public_id</code>.
     */
    public final TableField<Record, UUID> PUBLIC_ID = createField(DSL.name("public_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.kpir_entry.domain_id</code>.
     */
    public final TableField<Record, Integer> DOMAIN_ID = createField(DSL.name("domain_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.kpir_entry.entry_date</code>.
     */
    public final TableField<Record, LocalDate> ENTRY_DATE = createField(DSL.name("entry_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>public.kpir_entry.entry_order</code>.
     */
    public final TableField<Record, Integer> ENTRY_ORDER = createField(DSL.name("entry_order"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.kpir_entry.booking_number</code>.
     */
    public final TableField<Record, String> BOOKING_NUMBER = createField(DSL.name("booking_number"), SQLDataType.VARCHAR(1000).nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.kpir_entry.counterparty</code>.
     */
    public final TableField<Record, String> COUNTERPARTY = createField(DSL.name("counterparty"), SQLDataType.VARCHAR(1000).nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.kpir_entry.counterparty_address</code>.
     */
    public final TableField<Record, String> COUNTERPARTY_ADDRESS = createField(DSL.name("counterparty_address"), SQLDataType.VARCHAR(1000).nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.kpir_entry.description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1000).nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>public.kpir_entry.provided_goods_and_services_value</code>.
     */
    public final TableField<Record, BigDecimal> PROVIDED_GOODS_AND_SERVICES_VALUE = createField(DSL.name("provided_goods_and_services_value"), SQLDataType.NUMERIC(19, 2).nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.kpir_entry.other_incomes</code>.
     */
    public final TableField<Record, BigDecimal> OTHER_INCOMES = createField(DSL.name("other_incomes"), SQLDataType.NUMERIC(19, 2).nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.kpir_entry.total_incomes</code>.
     */
    public final TableField<Record, BigDecimal> TOTAL_INCOMES = createField(DSL.name("total_incomes"), SQLDataType.NUMERIC(19, 2).nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "");

    /**
     * The column
     * <code>public.kpir_entry.purchased_goods_and_materials_value</code>.
     */
    public final TableField<Record, BigDecimal> PURCHASED_GOODS_AND_MATERIALS_VALUE = createField(DSL.name("purchased_goods_and_materials_value"), SQLDataType.NUMERIC(19, 2).nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.kpir_entry.additional_cost_of_purchase</code>.
     */
    public final TableField<Record, BigDecimal> ADDITIONAL_COST_OF_PURCHASE = createField(DSL.name("additional_cost_of_purchase"), SQLDataType.NUMERIC(19, 2).nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "");

    /**
     * The column
     * <code>public.kpir_entry.remuneration_in_cash_or_in_kind</code>.
     */
    public final TableField<Record, BigDecimal> REMUNERATION_IN_CASH_OR_IN_KIND = createField(DSL.name("remuneration_in_cash_or_in_kind"), SQLDataType.NUMERIC(19, 2).nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.kpir_entry.other_expenses</code>.
     */
    public final TableField<Record, BigDecimal> OTHER_EXPENSES = createField(DSL.name("other_expenses"), SQLDataType.NUMERIC(19, 2).nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.kpir_entry.total_expenses</code>.
     */
    public final TableField<Record, BigDecimal> TOTAL_EXPENSES = createField(DSL.name("total_expenses"), SQLDataType.NUMERIC(19, 2).nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.kpir_entry.comments</code>.
     */
    public final TableField<Record, String> COMMENTS = createField(DSL.name("comments"), SQLDataType.VARCHAR(10000).nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    private KpirEntry(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private KpirEntry(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.kpir_entry</code> table reference
     */
    public KpirEntry(String alias) {
        this(DSL.name(alias), KPIR_ENTRY);
    }

    /**
     * Create an aliased <code>public.kpir_entry</code> table reference
     */
    public KpirEntry(Name alias) {
        this(alias, KPIR_ENTRY);
    }

    /**
     * Create a <code>public.kpir_entry</code> table reference
     */
    public KpirEntry() {
        this(DSL.name("kpir_entry"), null);
    }

    public <O extends Record> KpirEntry(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, KPIR_ENTRY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<Record, Long> getIdentity() {
        return (Identity<Record, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KPIR_ENTRY_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.KPIR_ENTRY__FK_DOMAIN);
    }

    private transient Domain _domain;

    /**
     * Get the implicit join path to the <code>public.domain</code> table.
     */
    public Domain domain() {
        if (_domain == null)
            _domain = new Domain(this, Keys.KPIR_ENTRY__FK_DOMAIN);

        return _domain;
    }

    @Override
    public KpirEntry as(String alias) {
        return new KpirEntry(DSL.name(alias), this);
    }

    @Override
    public KpirEntry as(Name alias) {
        return new KpirEntry(alias, this);
    }

    @Override
    public KpirEntry as(Table<?> alias) {
        return new KpirEntry(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public KpirEntry rename(String name) {
        return new KpirEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KpirEntry rename(Name name) {
        return new KpirEntry(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public KpirEntry rename(Table<?> name) {
        return new KpirEntry(name.getQualifiedName(), null);
    }
}
