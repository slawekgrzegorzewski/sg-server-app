/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageVersionElementsRemoved extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.page_version_elements_removed</code>
     */
    public static final PageVersionElementsRemoved PAGE_VERSION_ELEMENTS_REMOVED = new PageVersionElementsRemoved();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>public.page_version_elements_removed.page_version_id</code>.
     */
    public final TableField<Record, Integer> PAGE_VERSION_ID = createField(DSL.name("page_version_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.page_version_elements_removed.elements_removed</code>.
     */
    public final TableField<Record, String> ELEMENTS_REMOVED = createField(DSL.name("elements_removed"), SQLDataType.VARCHAR(200000), this, "");

    private PageVersionElementsRemoved(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PageVersionElementsRemoved(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.page_version_elements_removed</code> table
     * reference
     */
    public PageVersionElementsRemoved(String alias) {
        this(DSL.name(alias), PAGE_VERSION_ELEMENTS_REMOVED);
    }

    /**
     * Create an aliased <code>public.page_version_elements_removed</code> table
     * reference
     */
    public PageVersionElementsRemoved(Name alias) {
        this(alias, PAGE_VERSION_ELEMENTS_REMOVED);
    }

    /**
     * Create a <code>public.page_version_elements_removed</code> table
     * reference
     */
    public PageVersionElementsRemoved() {
        this(DSL.name("page_version_elements_removed"), null);
    }

    public <O extends Record> PageVersionElementsRemoved(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PAGE_VERSION_ELEMENTS_REMOVED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.PAGE_VERSION_ELEMENTS_REMOVED__FK_PAGE_VERSION);
    }

    private transient PageVersion _pageVersion;

    /**
     * Get the implicit join path to the <code>public.page_version</code> table.
     */
    public PageVersion pageVersion() {
        if (_pageVersion == null)
            _pageVersion = new PageVersion(this, Keys.PAGE_VERSION_ELEMENTS_REMOVED__FK_PAGE_VERSION);

        return _pageVersion;
    }

    @Override
    public PageVersionElementsRemoved as(String alias) {
        return new PageVersionElementsRemoved(DSL.name(alias), this);
    }

    @Override
    public PageVersionElementsRemoved as(Name alias) {
        return new PageVersionElementsRemoved(alias, this);
    }

    @Override
    public PageVersionElementsRemoved as(Table<?> alias) {
        return new PageVersionElementsRemoved(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageVersionElementsRemoved rename(String name) {
        return new PageVersionElementsRemoved(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageVersionElementsRemoved rename(Name name) {
        return new PageVersionElementsRemoved(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageVersionElementsRemoved rename(Table<?> name) {
        return new PageVersionElementsRemoved(name.getQualifiedName(), null);
    }
}
