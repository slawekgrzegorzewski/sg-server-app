/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.sg.jooq.Keys;
import pl.sg.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NodrigenTransaction extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.nodrigen_transaction</code>
     */
    public static final NodrigenTransaction NODRIGEN_TRANSACTION = new NodrigenTransaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.nodrigen_transaction.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.additional_information</code>.
     */
    public final TableField<Record, String> ADDITIONAL_INFORMATION = createField(DSL.name("additional_information"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.additional_information_structured</code>.
     */
    public final TableField<Record, String> ADDITIONAL_INFORMATION_STRUCTURED = createField(DSL.name("additional_information_structured"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.balance_after_transaction_amount</code>.
     */
    public final TableField<Record, BigDecimal> BALANCE_AFTER_TRANSACTION_AMOUNT = createField(DSL.name("balance_after_transaction_amount"), SQLDataType.NUMERIC(19, 2), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.balance_after_transaction_currency</code>.
     */
    public final TableField<Record, String> BALANCE_AFTER_TRANSACTION_CURRENCY = createField(DSL.name("balance_after_transaction_currency"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.balance_after_transaction_balance_type</code>.
     */
    public final TableField<Record, String> BALANCE_AFTER_TRANSACTION_BALANCE_TYPE = createField(DSL.name("balance_after_transaction_balance_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.balance_after_transaction_credit_limit_included</code>.
     */
    public final TableField<Record, Boolean> BALANCE_AFTER_TRANSACTION_CREDIT_LIMIT_INCLUDED = createField(DSL.name("balance_after_transaction_credit_limit_included"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.balance_after_transaction_last_change_date_time</code>.
     */
    public final TableField<Record, LocalDateTime> BALANCE_AFTER_TRANSACTION_LAST_CHANGE_DATE_TIME = createField(DSL.name("balance_after_transaction_last_change_date_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.balance_after_transaction_last_committed_transaction</code>.
     */
    public final TableField<Record, String> BALANCE_AFTER_TRANSACTION_LAST_COMMITTED_TRANSACTION = createField(DSL.name("balance_after_transaction_last_committed_transaction"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.balance_after_transaction_reference_date</code>.
     */
    public final TableField<Record, LocalDate> BALANCE_AFTER_TRANSACTION_REFERENCE_DATE = createField(DSL.name("balance_after_transaction_reference_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.bank_transaction_code</code>.
     */
    public final TableField<Record, String> BANK_TRANSACTION_CODE = createField(DSL.name("bank_transaction_code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.booking_date</code>.
     */
    public final TableField<Record, LocalDate> BOOKING_DATE = createField(DSL.name("booking_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.nodrigen_transaction.booking_date_time</code>.
     */
    public final TableField<Record, LocalDateTime> BOOKING_DATE_TIME = createField(DSL.name("booking_date_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.nodrigen_transaction.check_id</code>.
     */
    public final TableField<Record, String> CHECK_ID = createField(DSL.name("check_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.creditor_account_bban</code>.
     */
    public final TableField<Record, String> CREDITOR_ACCOUNT_BBAN = createField(DSL.name("creditor_account_bban"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.creditor_account_iban</code>.
     */
    public final TableField<Record, String> CREDITOR_ACCOUNT_IBAN = createField(DSL.name("creditor_account_iban"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.creditor_agent</code>.
     */
    public final TableField<Record, String> CREDITOR_AGENT = createField(DSL.name("creditor_agent"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.creditor_id</code>.
     */
    public final TableField<Record, String> CREDITOR_ID = createField(DSL.name("creditor_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.creditor_name</code>.
     */
    public final TableField<Record, String> CREDITOR_NAME = createField(DSL.name("creditor_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.currency_exchange_rate</code>.
     */
    public final TableField<Record, BigDecimal> CURRENCY_EXCHANGE_RATE = createField(DSL.name("currency_exchange_rate"), SQLDataType.NUMERIC(19, 2), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.currency_exchange_instructed_amount_amount</code>.
     */
    public final TableField<Record, BigDecimal> CURRENCY_EXCHANGE_INSTRUCTED_AMOUNT_AMOUNT = createField(DSL.name("currency_exchange_instructed_amount_amount"), SQLDataType.NUMERIC(19, 2), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.currency_exchange_instructed_amount_currency</code>.
     */
    public final TableField<Record, String> CURRENCY_EXCHANGE_INSTRUCTED_AMOUNT_CURRENCY = createField(DSL.name("currency_exchange_instructed_amount_currency"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.currency_exchange_source_currency</code>.
     */
    public final TableField<Record, String> CURRENCY_EXCHANGE_SOURCE_CURRENCY = createField(DSL.name("currency_exchange_source_currency"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.currency_exchange_target_currency</code>.
     */
    public final TableField<Record, String> CURRENCY_EXCHANGE_TARGET_CURRENCY = createField(DSL.name("currency_exchange_target_currency"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.currency_exchange_unit_currency</code>.
     */
    public final TableField<Record, String> CURRENCY_EXCHANGE_UNIT_CURRENCY = createField(DSL.name("currency_exchange_unit_currency"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.debtor_account_bban</code>.
     */
    public final TableField<Record, String> DEBTOR_ACCOUNT_BBAN = createField(DSL.name("debtor_account_bban"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.debtor_account_iban</code>.
     */
    public final TableField<Record, String> DEBTOR_ACCOUNT_IBAN = createField(DSL.name("debtor_account_iban"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.debtor_agent</code>.
     */
    public final TableField<Record, String> DEBTOR_AGENT = createField(DSL.name("debtor_agent"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.debtor_name</code>.
     */
    public final TableField<Record, String> DEBTOR_NAME = createField(DSL.name("debtor_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.entry_reference</code>.
     */
    public final TableField<Record, String> ENTRY_REFERENCE = createField(DSL.name("entry_reference"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.mandate_id</code>.
     */
    public final TableField<Record, String> MANDATE_ID = createField(DSL.name("mandate_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.phase</code>.
     */
    public final TableField<Record, String> PHASE = createField(DSL.name("phase"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.proprietary_bank_transaction_code</code>.
     */
    public final TableField<Record, String> PROPRIETARY_BANK_TRANSACTION_CODE = createField(DSL.name("proprietary_bank_transaction_code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.purpose_code</code>.
     */
    public final TableField<Record, String> PURPOSE_CODE = createField(DSL.name("purpose_code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.remittance_information_structured</code>.
     */
    public final TableField<Record, String> REMITTANCE_INFORMATION_STRUCTURED = createField(DSL.name("remittance_information_structured"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.remittance_information_structured_array</code>.
     */
    public final TableField<Record, String> REMITTANCE_INFORMATION_STRUCTURED_ARRAY = createField(DSL.name("remittance_information_structured_array"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.remittance_information_unstructured</code>.
     */
    public final TableField<Record, String> REMITTANCE_INFORMATION_UNSTRUCTURED = createField(DSL.name("remittance_information_unstructured"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.remittance_information_unstructured_array</code>.
     */
    public final TableField<Record, String> REMITTANCE_INFORMATION_UNSTRUCTURED_ARRAY = createField(DSL.name("remittance_information_unstructured_array"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.transaction_amount_amount</code>.
     */
    public final TableField<Record, BigDecimal> TRANSACTION_AMOUNT_AMOUNT = createField(DSL.name("transaction_amount_amount"), SQLDataType.NUMERIC(19, 2), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.transaction_amount_currency</code>.
     */
    public final TableField<Record, String> TRANSACTION_AMOUNT_CURRENCY = createField(DSL.name("transaction_amount_currency"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.transaction_id</code>.
     */
    public final TableField<Record, String> TRANSACTION_ID = createField(DSL.name("transaction_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.ultimate_creditor</code>.
     */
    public final TableField<Record, String> ULTIMATE_CREDITOR = createField(DSL.name("ultimate_creditor"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.ultimate_debtor</code>.
     */
    public final TableField<Record, String> ULTIMATE_DEBTOR = createField(DSL.name("ultimate_debtor"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.nodrigen_transaction.value_date</code>.
     */
    public final TableField<Record, LocalDate> VALUE_DATE = createField(DSL.name("value_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.nodrigen_transaction.value_date_time</code>.
     */
    public final TableField<Record, LocalDateTime> VALUE_DATE_TIME = createField(DSL.name("value_date_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.nodrigen_transaction.bank_account_id</code>.
     */
    public final TableField<Record, Integer> BANK_ACCOUNT_ID = createField(DSL.name("bank_account_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.nodrigen_transaction.import_time</code>.
     */
    public final TableField<Record, LocalDateTime> IMPORT_TIME = createField(DSL.name("import_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.nodrigen_transaction.credit_transaction_id</code>.
     */
    public final TableField<Record, Integer> CREDIT_TRANSACTION_ID = createField(DSL.name("credit_transaction_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.nodrigen_transaction.debit_transaction_id</code>.
     */
    public final TableField<Record, Integer> DEBIT_TRANSACTION_ID = createField(DSL.name("debit_transaction_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.nodrigen_transaction.reset_in_id</code>.
     */
    public final TableField<Record, Integer> RESET_IN_ID = createField(DSL.name("reset_in_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.nodrigen_transaction.ignored</code>.
     */
    public final TableField<Record, Boolean> IGNORED = createField(DSL.name("ignored"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private NodrigenTransaction(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private NodrigenTransaction(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.nodrigen_transaction</code> table
     * reference
     */
    public NodrigenTransaction(String alias) {
        this(DSL.name(alias), NODRIGEN_TRANSACTION);
    }

    /**
     * Create an aliased <code>public.nodrigen_transaction</code> table
     * reference
     */
    public NodrigenTransaction(Name alias) {
        this(alias, NODRIGEN_TRANSACTION);
    }

    /**
     * Create a <code>public.nodrigen_transaction</code> table reference
     */
    public NodrigenTransaction() {
        this(DSL.name("nodrigen_transaction"), null);
    }

    public <O extends Record> NodrigenTransaction(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, NODRIGEN_TRANSACTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.NODRIGEN_TRANSACTION_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.NODRIGEN_TRANSACTION__FK_BANK_ACCOUNT, Keys.NODRIGEN_TRANSACTION__FK_CREDIT_TRANSACTION, Keys.NODRIGEN_TRANSACTION__FK_DEBIT_TRANSACTION, Keys.NODRIGEN_TRANSACTION__FK_RESET_IN_TRANSATION);
    }

    private transient BankAccount _bankAccount;
    private transient FinancialTransaction _fkCreditTransaction;
    private transient FinancialTransaction _fkDebitTransaction;
    private transient NodrigenTransaction _nodrigenTransaction;

    /**
     * Get the implicit join path to the <code>public.bank_account</code> table.
     */
    public BankAccount bankAccount() {
        if (_bankAccount == null)
            _bankAccount = new BankAccount(this, Keys.NODRIGEN_TRANSACTION__FK_BANK_ACCOUNT);

        return _bankAccount;
    }

    /**
     * Get the implicit join path to the
     * <code>public.financial_transaction</code> table, via the
     * <code>fk_credit_transaction</code> key.
     */
    public FinancialTransaction fkCreditTransaction() {
        if (_fkCreditTransaction == null)
            _fkCreditTransaction = new FinancialTransaction(this, Keys.NODRIGEN_TRANSACTION__FK_CREDIT_TRANSACTION);

        return _fkCreditTransaction;
    }

    /**
     * Get the implicit join path to the
     * <code>public.financial_transaction</code> table, via the
     * <code>fk_debit_transaction</code> key.
     */
    public FinancialTransaction fkDebitTransaction() {
        if (_fkDebitTransaction == null)
            _fkDebitTransaction = new FinancialTransaction(this, Keys.NODRIGEN_TRANSACTION__FK_DEBIT_TRANSACTION);

        return _fkDebitTransaction;
    }

    /**
     * Get the implicit join path to the
     * <code>public.nodrigen_transaction</code> table.
     */
    public NodrigenTransaction nodrigenTransaction() {
        if (_nodrigenTransaction == null)
            _nodrigenTransaction = new NodrigenTransaction(this, Keys.NODRIGEN_TRANSACTION__FK_RESET_IN_TRANSATION);

        return _nodrigenTransaction;
    }

    @Override
    public NodrigenTransaction as(String alias) {
        return new NodrigenTransaction(DSL.name(alias), this);
    }

    @Override
    public NodrigenTransaction as(Name alias) {
        return new NodrigenTransaction(alias, this);
    }

    @Override
    public NodrigenTransaction as(Table<?> alias) {
        return new NodrigenTransaction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NodrigenTransaction rename(String name) {
        return new NodrigenTransaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NodrigenTransaction rename(Name name) {
        return new NodrigenTransaction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NodrigenTransaction rename(Table<?> name) {
        return new NodrigenTransaction(name.getQualifiedName(), null);
    }
}
