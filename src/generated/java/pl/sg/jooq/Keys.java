/*
 * This file is generated by jOOQ.
 */
package pl.sg.jooq;


import org.jooq.ForeignKey;
import org.jooq.Record;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import pl.sg.jooq.tables.Account;
import pl.sg.jooq.tables.AccountantSettings;
import pl.sg.jooq.tables.ApplicationUser;
import pl.sg.jooq.tables.ApplicationUserDomainRelation;
import pl.sg.jooq.tables.ApplicationUserRoles;
import pl.sg.jooq.tables.BankAccount;
import pl.sg.jooq.tables.BankPermission;
import pl.sg.jooq.tables.BillingPeriod;
import pl.sg.jooq.tables.Category;
import pl.sg.jooq.tables.CheckerStep;
import pl.sg.jooq.tables.CheckerTask;
import pl.sg.jooq.tables.CheckerTaskHistory;
import pl.sg.jooq.tables.CheckerTaskSteps;
import pl.sg.jooq.tables.Client;
import pl.sg.jooq.tables.ClientPayment;
import pl.sg.jooq.tables.Country;
import pl.sg.jooq.tables.CountryNames;
import pl.sg.jooq.tables.CubeRecord;
import pl.sg.jooq.tables.Domain;
import pl.sg.jooq.tables.DomainInvitation;
import pl.sg.jooq.tables.Expense;
import pl.sg.jooq.tables.FinancialTransaction;
import pl.sg.jooq.tables.FlywaySchemaHistory;
import pl.sg.jooq.tables.HolidayCurrencies;
import pl.sg.jooq.tables.Income;
import pl.sg.jooq.tables.IntellectualProperty;
import pl.sg.jooq.tables.KpirEntry;
import pl.sg.jooq.tables.MonthSummary;
import pl.sg.jooq.tables.NodrigenAccess;
import pl.sg.jooq.tables.NodrigenBankAccountBalance;
import pl.sg.jooq.tables.NodrigenTransaction;
import pl.sg.jooq.tables.PageVersion;
import pl.sg.jooq.tables.PageVersionContent;
import pl.sg.jooq.tables.PageVersionElementsAdded;
import pl.sg.jooq.tables.PageVersionElementsRemoved;
import pl.sg.jooq.tables.PerformedService;
import pl.sg.jooq.tables.PerformedServicePayment;
import pl.sg.jooq.tables.PiggyBank;
import pl.sg.jooq.tables.SaveResultStepEmailCcs;
import pl.sg.jooq.tables.SaveResultStepEmailTos;
import pl.sg.jooq.tables.Service;
import pl.sg.jooq.tables.Syr;
import pl.sg.jooq.tables.Task;
import pl.sg.jooq.tables.TaskAttachments;
import pl.sg.jooq.tables.TimeRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<Record> ACCOUNT_PKEY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_pkey"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<Record> ACCOUNTANT_SETTINGS_PKEY = Internal.createUniqueKey(AccountantSettings.ACCOUNTANT_SETTINGS, DSL.name("accountant_settings_pkey"), new TableField[] { AccountantSettings.ACCOUNTANT_SETTINGS.ID }, true);
    public static final UniqueKey<Record> APPLICATION_USER_PKEY = Internal.createUniqueKey(ApplicationUser.APPLICATION_USER, DSL.name("application_user_pkey"), new TableField[] { ApplicationUser.APPLICATION_USER.ID }, true);
    public static final UniqueKey<Record> APPLICATION_USER_DOMAIN_RELATION_PKEY = Internal.createUniqueKey(ApplicationUserDomainRelation.APPLICATION_USER_DOMAIN_RELATION, DSL.name("application_user_domain_relation_pkey"), new TableField[] { ApplicationUserDomainRelation.APPLICATION_USER_DOMAIN_RELATION.APPLICATION_USER_ID, ApplicationUserDomainRelation.APPLICATION_USER_DOMAIN_RELATION.DOMAIN_ID }, true);
    public static final UniqueKey<Record> BANK_ACCOUNT_PKEY = Internal.createUniqueKey(BankAccount.BANK_ACCOUNT, DSL.name("bank_account_pkey"), new TableField[] { BankAccount.BANK_ACCOUNT.ID }, true);
    public static final UniqueKey<Record> BANK_PERMISSION_PKEY = Internal.createUniqueKey(BankPermission.BANK_PERMISSION, DSL.name("bank_permission_pkey"), new TableField[] { BankPermission.BANK_PERMISSION.ID }, true);
    public static final UniqueKey<Record> BILLING_PERIOD_PKEY = Internal.createUniqueKey(BillingPeriod.BILLING_PERIOD, DSL.name("billing_period_pkey"), new TableField[] { BillingPeriod.BILLING_PERIOD.ID }, true);
    public static final UniqueKey<Record> CATEGORY_PKEY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<Record> CHECKER_STEP_PKEY = Internal.createUniqueKey(CheckerStep.CHECKER_STEP, DSL.name("checker_step_pkey"), new TableField[] { CheckerStep.CHECKER_STEP.ID }, true);
    public static final UniqueKey<Record> CHECKER_TASK_PKEY = Internal.createUniqueKey(CheckerTask.CHECKER_TASK, DSL.name("checker_task_pkey"), new TableField[] { CheckerTask.CHECKER_TASK.ID }, true);
    public static final UniqueKey<Record> CHECKER_TASK_HISTORY_PKEY = Internal.createUniqueKey(CheckerTaskHistory.CHECKER_TASK_HISTORY, DSL.name("checker_task_history_pkey"), new TableField[] { CheckerTaskHistory.CHECKER_TASK_HISTORY.ID }, true);
    public static final UniqueKey<Record> UK_7Q5BGTQSCO1VT3ASO3H7MATK1 = Internal.createUniqueKey(CheckerTaskSteps.CHECKER_TASK_STEPS, DSL.name("uk_7q5bgtqsco1vt3aso3h7matk1"), new TableField[] { CheckerTaskSteps.CHECKER_TASK_STEPS.STEPS_ID }, true);
    public static final UniqueKey<Record> UK_CHECKER_STEP = Internal.createUniqueKey(CheckerTaskSteps.CHECKER_TASK_STEPS, DSL.name("uk_checker_step"), new TableField[] { CheckerTaskSteps.CHECKER_TASK_STEPS.STEPS_ID }, true);
    public static final UniqueKey<Record> CLIENT_PKEY = Internal.createUniqueKey(Client.CLIENT, DSL.name("client_pkey"), new TableField[] { Client.CLIENT.ID }, true);
    public static final UniqueKey<Record> CLIENT_PAYMENT_PKEY = Internal.createUniqueKey(ClientPayment.CLIENT_PAYMENT, DSL.name("client_payment_pkey"), new TableField[] { ClientPayment.CLIENT_PAYMENT.ID }, true);
    public static final UniqueKey<Record> COUNTRY_PKEY = Internal.createUniqueKey(Country.COUNTRY, DSL.name("country_pkey"), new TableField[] { Country.COUNTRY.ID }, true);
    public static final UniqueKey<Record> CUBE_RECORD_PKEY = Internal.createUniqueKey(CubeRecord.CUBE_RECORD, DSL.name("cube_record_pkey"), new TableField[] { CubeRecord.CUBE_RECORD.ID }, true);
    public static final UniqueKey<Record> DOMAIN_PKEY = Internal.createUniqueKey(Domain.DOMAIN, DSL.name("domain_pkey"), new TableField[] { Domain.DOMAIN.ID }, true);
    public static final UniqueKey<Record> DOMAIN_INVITATION_PKEY = Internal.createUniqueKey(DomainInvitation.DOMAIN_INVITATION, DSL.name("domain_invitation_pkey"), new TableField[] { DomainInvitation.DOMAIN_INVITATION.APPLICATION_USER_ID, DomainInvitation.DOMAIN_INVITATION.DOMAIN_ID }, true);
    public static final UniqueKey<Record> EXPENSE_PKEY = Internal.createUniqueKey(Expense.EXPENSE, DSL.name("expense_pkey"), new TableField[] { Expense.EXPENSE.ID }, true);
    public static final UniqueKey<Record> FINANCIAL_TRANSACTION_PKEY = Internal.createUniqueKey(FinancialTransaction.FINANCIAL_TRANSACTION, DSL.name("financial_transaction_pkey"), new TableField[] { FinancialTransaction.FINANCIAL_TRANSACTION.ID }, true);
    public static final UniqueKey<Record> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<Record> HOLIDAY_CURRENCIES_PKEY = Internal.createUniqueKey(HolidayCurrencies.HOLIDAY_CURRENCIES, DSL.name("holiday_currencies_pkey"), new TableField[] { HolidayCurrencies.HOLIDAY_CURRENCIES.ID }, true);
    public static final UniqueKey<Record> INCOME_PKEY = Internal.createUniqueKey(Income.INCOME, DSL.name("income_pkey"), new TableField[] { Income.INCOME.ID }, true);
    public static final UniqueKey<Record> INTELLECTUAL_PROPERTY_PKEY = Internal.createUniqueKey(IntellectualProperty.INTELLECTUAL_PROPERTY, DSL.name("intellectual_property_pkey"), new TableField[] { IntellectualProperty.INTELLECTUAL_PROPERTY.ID }, true);
    public static final UniqueKey<Record> KPIR_ENTRY_PKEY = Internal.createUniqueKey(KpirEntry.KPIR_ENTRY, DSL.name("kpir_entry_pkey"), new TableField[] { KpirEntry.KPIR_ENTRY.ID }, true);
    public static final UniqueKey<Record> MONTH_SUMMARY_PKEY = Internal.createUniqueKey(MonthSummary.MONTH_SUMMARY, DSL.name("month_summary_pkey"), new TableField[] { MonthSummary.MONTH_SUMMARY.ID }, true);
    public static final UniqueKey<Record> NODRIGEN_ACCESS_PKEY = Internal.createUniqueKey(NodrigenAccess.NODRIGEN_ACCESS, DSL.name("nodrigen_access_pkey"), new TableField[] { NodrigenAccess.NODRIGEN_ACCESS.ID }, true);
    public static final UniqueKey<Record> NODRIGEN_BANK_ACCOUNT_BALANCE_PKEY = Internal.createUniqueKey(NodrigenBankAccountBalance.NODRIGEN_BANK_ACCOUNT_BALANCE, DSL.name("nodrigen_bank_account_balance_pkey"), new TableField[] { NodrigenBankAccountBalance.NODRIGEN_BANK_ACCOUNT_BALANCE.ID }, true);
    public static final UniqueKey<Record> NODRIGEN_TRANSACTION_PKEY = Internal.createUniqueKey(NodrigenTransaction.NODRIGEN_TRANSACTION, DSL.name("nodrigen_transaction_pkey"), new TableField[] { NodrigenTransaction.NODRIGEN_TRANSACTION.ID }, true);
    public static final UniqueKey<Record> PAGE_VERSION_PKEY = Internal.createUniqueKey(PageVersion.PAGE_VERSION, DSL.name("page_version_pkey"), new TableField[] { PageVersion.PAGE_VERSION.ID }, true);
    public static final UniqueKey<Record> PERFORMED_SERVICE_PKEY = Internal.createUniqueKey(PerformedService.PERFORMED_SERVICE, DSL.name("performed_service_pkey"), new TableField[] { PerformedService.PERFORMED_SERVICE.ID }, true);
    public static final UniqueKey<Record> PERFORMED_SERVICE_PAYMENT_PKEY = Internal.createUniqueKey(PerformedServicePayment.PERFORMED_SERVICE_PAYMENT, DSL.name("performed_service_payment_pkey"), new TableField[] { PerformedServicePayment.PERFORMED_SERVICE_PAYMENT.ID }, true);
    public static final UniqueKey<Record> PIGGY_BANK_PKEY = Internal.createUniqueKey(PiggyBank.PIGGY_BANK, DSL.name("piggy_bank_pkey"), new TableField[] { PiggyBank.PIGGY_BANK.ID }, true);
    public static final UniqueKey<Record> SAVE_RESULT_STEP_EMAIL_CCS_PKEY = Internal.createUniqueKey(SaveResultStepEmailCcs.SAVE_RESULT_STEP_EMAIL_CCS, DSL.name("save_result_step_email_ccs_pkey"), new TableField[] { SaveResultStepEmailCcs.SAVE_RESULT_STEP_EMAIL_CCS.ID, SaveResultStepEmailCcs.SAVE_RESULT_STEP_EMAIL_CCS.CC_NAME }, true);
    public static final UniqueKey<Record> SAVE_RESULT_STEP_EMAIL_TOS_PKEY = Internal.createUniqueKey(SaveResultStepEmailTos.SAVE_RESULT_STEP_EMAIL_TOS, DSL.name("save_result_step_email_tos_pkey"), new TableField[] { SaveResultStepEmailTos.SAVE_RESULT_STEP_EMAIL_TOS.ID, SaveResultStepEmailTos.SAVE_RESULT_STEP_EMAIL_TOS.TO_NAME }, true);
    public static final UniqueKey<Record> SERVICE_PKEY = Internal.createUniqueKey(Service.SERVICE, DSL.name("service_pkey"), new TableField[] { Service.SERVICE.ID }, true);
    public static final UniqueKey<Record> SYR_PKEY = Internal.createUniqueKey(Syr.SYR, DSL.name("syr_pkey"), new TableField[] { Syr.SYR.ID }, true);
    public static final UniqueKey<Record> TASK_PKEY = Internal.createUniqueKey(Task.TASK, DSL.name("task_pkey"), new TableField[] { Task.TASK.ID }, true);
    public static final UniqueKey<Record> TIME_RECORD_PKEY = Internal.createUniqueKey(TimeRecord.TIME_RECORD, DSL.name("time_record_pkey"), new TableField[] { TimeRecord.TIME_RECORD.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<Record, Record> ACCOUNT__FK_BANK_ACCOUNT = Internal.createForeignKey(Account.ACCOUNT, DSL.name("fk_bank_account"), new TableField[] { Account.ACCOUNT.BANK_ACCOUNT_ID }, Keys.BANK_ACCOUNT_PKEY, new TableField[] { BankAccount.BANK_ACCOUNT.ID }, true);
    public static final ForeignKey<Record, Record> ACCOUNT__FK_DOMAIN = Internal.createForeignKey(Account.ACCOUNT, DSL.name("fk_domain"), new TableField[] { Account.ACCOUNT.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> ACCOUNT__FK_FINANCIAL_TRANSACTION = Internal.createForeignKey(Account.ACCOUNT, DSL.name("fk_financial_transaction"), new TableField[] { Account.ACCOUNT.LAST_TRANSACTION_INCLUDED_IN_BALANCE_ID }, Keys.FINANCIAL_TRANSACTION_PKEY, new TableField[] { FinancialTransaction.FINANCIAL_TRANSACTION.ID }, true);
    public static final ForeignKey<Record, Record> ACCOUNTANT_SETTINGS__FK_DOMAIN = Internal.createForeignKey(AccountantSettings.ACCOUNTANT_SETTINGS, DSL.name("fk_domain"), new TableField[] { AccountantSettings.ACCOUNTANT_SETTINGS.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> APPLICATION_USER__FK_DOMAIN = Internal.createForeignKey(ApplicationUser.APPLICATION_USER, DSL.name("fk_domain"), new TableField[] { ApplicationUser.APPLICATION_USER.DEFAULT_DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> APPLICATION_USER_DOMAIN_RELATION__FK_APPLICATION_USER = Internal.createForeignKey(ApplicationUserDomainRelation.APPLICATION_USER_DOMAIN_RELATION, DSL.name("fk_application_user"), new TableField[] { ApplicationUserDomainRelation.APPLICATION_USER_DOMAIN_RELATION.APPLICATION_USER_ID }, Keys.APPLICATION_USER_PKEY, new TableField[] { ApplicationUser.APPLICATION_USER.ID }, true);
    public static final ForeignKey<Record, Record> APPLICATION_USER_DOMAIN_RELATION__FK_DOMAIN = Internal.createForeignKey(ApplicationUserDomainRelation.APPLICATION_USER_DOMAIN_RELATION, DSL.name("fk_domain"), new TableField[] { ApplicationUserDomainRelation.APPLICATION_USER_DOMAIN_RELATION.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> APPLICATION_USER_ROLES__FK_APPLICATION_USER = Internal.createForeignKey(ApplicationUserRoles.APPLICATION_USER_ROLES, DSL.name("fk_application_user"), new TableField[] { ApplicationUserRoles.APPLICATION_USER_ROLES.APPLICATION_USER_ID }, Keys.APPLICATION_USER_PKEY, new TableField[] { ApplicationUser.APPLICATION_USER.ID }, true);
    public static final ForeignKey<Record, Record> BANK_ACCOUNT__FK_BANK_PERMISSION = Internal.createForeignKey(BankAccount.BANK_ACCOUNT, DSL.name("fk_bank_permission"), new TableField[] { BankAccount.BANK_ACCOUNT.BANK_PERMISSION_ID }, Keys.BANK_PERMISSION_PKEY, new TableField[] { BankPermission.BANK_PERMISSION.ID }, true);
    public static final ForeignKey<Record, Record> BANK_ACCOUNT__FK_DOMAIN = Internal.createForeignKey(BankAccount.BANK_ACCOUNT, DSL.name("fk_domain"), new TableField[] { BankAccount.BANK_ACCOUNT.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> BANK_PERMISSION__FK_DOMAIN = Internal.createForeignKey(BankPermission.BANK_PERMISSION, DSL.name("fk_domain"), new TableField[] { BankPermission.BANK_PERMISSION.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> BILLING_PERIOD__FK_DOMAIN = Internal.createForeignKey(BillingPeriod.BILLING_PERIOD, DSL.name("fk_domain"), new TableField[] { BillingPeriod.BILLING_PERIOD.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> CATEGORY__FK_DOMAIN = Internal.createForeignKey(Category.CATEGORY, DSL.name("fk_domain"), new TableField[] { Category.CATEGORY.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> CHECKER_TASK__FK_APPLICATION_USER = Internal.createForeignKey(CheckerTask.CHECKER_TASK, DSL.name("fk_application_user"), new TableField[] { CheckerTask.CHECKER_TASK.FOR_USER_ID }, Keys.APPLICATION_USER_PKEY, new TableField[] { ApplicationUser.APPLICATION_USER.ID }, true);
    public static final ForeignKey<Record, Record> CHECKER_TASK_HISTORY__FK_CHECKER_TASK = Internal.createForeignKey(CheckerTaskHistory.CHECKER_TASK_HISTORY, DSL.name("fk_checker_task"), new TableField[] { CheckerTaskHistory.CHECKER_TASK_HISTORY.TASK_ID }, Keys.CHECKER_TASK_PKEY, new TableField[] { CheckerTask.CHECKER_TASK.ID }, true);
    public static final ForeignKey<Record, Record> CHECKER_TASK_STEPS__FK_CHECKER_STEP = Internal.createForeignKey(CheckerTaskSteps.CHECKER_TASK_STEPS, DSL.name("fk_checker_step"), new TableField[] { CheckerTaskSteps.CHECKER_TASK_STEPS.STEPS_ID }, Keys.CHECKER_STEP_PKEY, new TableField[] { CheckerStep.CHECKER_STEP.ID }, true);
    public static final ForeignKey<Record, Record> CHECKER_TASK_STEPS__FK_CHECKER_TASK = Internal.createForeignKey(CheckerTaskSteps.CHECKER_TASK_STEPS, DSL.name("fk_checker_task"), new TableField[] { CheckerTaskSteps.CHECKER_TASK_STEPS.CHECKER_TASK_ID }, Keys.CHECKER_TASK_PKEY, new TableField[] { CheckerTask.CHECKER_TASK.ID }, true);
    public static final ForeignKey<Record, Record> CLIENT__FK_DOMAIN = Internal.createForeignKey(Client.CLIENT, DSL.name("fk_domain"), new TableField[] { Client.CLIENT.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> CLIENT_PAYMENT__FK_CLIENT = Internal.createForeignKey(ClientPayment.CLIENT_PAYMENT, DSL.name("fk_client"), new TableField[] { ClientPayment.CLIENT_PAYMENT.CLIENT_ID }, Keys.CLIENT_PKEY, new TableField[] { Client.CLIENT.ID }, true);
    public static final ForeignKey<Record, Record> CLIENT_PAYMENT__FK_DOMAIN = Internal.createForeignKey(ClientPayment.CLIENT_PAYMENT, DSL.name("fk_domain"), new TableField[] { ClientPayment.CLIENT_PAYMENT.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> COUNTRY_NAMES__FK_COUNTRY = Internal.createForeignKey(CountryNames.COUNTRY_NAMES, DSL.name("fk_country"), new TableField[] { CountryNames.COUNTRY_NAMES.COUNTRY_ID }, Keys.COUNTRY_PKEY, new TableField[] { Country.COUNTRY.ID }, true);
    public static final ForeignKey<Record, Record> CUBE_RECORD__FK_DOMAIN = Internal.createForeignKey(CubeRecord.CUBE_RECORD, DSL.name("fk_domain"), new TableField[] { CubeRecord.CUBE_RECORD.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> DOMAIN_INVITATION__FK_APPLICATION_USER = Internal.createForeignKey(DomainInvitation.DOMAIN_INVITATION, DSL.name("fk_application_user"), new TableField[] { DomainInvitation.DOMAIN_INVITATION.APPLICATION_USER_ID }, Keys.APPLICATION_USER_PKEY, new TableField[] { ApplicationUser.APPLICATION_USER.ID }, true);
    public static final ForeignKey<Record, Record> DOMAIN_INVITATION__FK_DOMAIN = Internal.createForeignKey(DomainInvitation.DOMAIN_INVITATION, DSL.name("fk_domain"), new TableField[] { DomainInvitation.DOMAIN_INVITATION.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> EXPENSE__FK_BILLING_PERIOD = Internal.createForeignKey(Expense.EXPENSE, DSL.name("fk_billing_period"), new TableField[] { Expense.EXPENSE.BILLING_PERIOD_ID }, Keys.BILLING_PERIOD_PKEY, new TableField[] { BillingPeriod.BILLING_PERIOD.ID }, true);
    public static final ForeignKey<Record, Record> EXPENSE__FK_CATEGORY = Internal.createForeignKey(Expense.EXPENSE, DSL.name("fk_category"), new TableField[] { Expense.EXPENSE.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<Record, Record> FINANCIAL_TRANSACTION__FK_DESTINATION_ACCOUNT = Internal.createForeignKey(FinancialTransaction.FINANCIAL_TRANSACTION, DSL.name("fk_destination_account"), new TableField[] { FinancialTransaction.FINANCIAL_TRANSACTION.DESTINATION_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<Record, Record> FINANCIAL_TRANSACTION__FK_SOURCE_ACCOUNT = Internal.createForeignKey(FinancialTransaction.FINANCIAL_TRANSACTION, DSL.name("fk_source_account"), new TableField[] { FinancialTransaction.FINANCIAL_TRANSACTION.SOURCE_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<Record, Record> HOLIDAY_CURRENCIES__FK_DOMAIN = Internal.createForeignKey(HolidayCurrencies.HOLIDAY_CURRENCIES, DSL.name("fk_domain"), new TableField[] { HolidayCurrencies.HOLIDAY_CURRENCIES.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> INCOME__FK_BILLING_PERIOD = Internal.createForeignKey(Income.INCOME, DSL.name("fk_billing_period"), new TableField[] { Income.INCOME.BILLING_PERIOD_ID }, Keys.BILLING_PERIOD_PKEY, new TableField[] { BillingPeriod.BILLING_PERIOD.ID }, true);
    public static final ForeignKey<Record, Record> INCOME__FK_CATEGORY = Internal.createForeignKey(Income.INCOME, DSL.name("fk_category"), new TableField[] { Income.INCOME.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<Record, Record> INTELLECTUAL_PROPERTY__FK_DOMAIN = Internal.createForeignKey(IntellectualProperty.INTELLECTUAL_PROPERTY, DSL.name("fk_domain"), new TableField[] { IntellectualProperty.INTELLECTUAL_PROPERTY.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> KPIR_ENTRY__FK_DOMAIN = Internal.createForeignKey(KpirEntry.KPIR_ENTRY, DSL.name("fk_domain"), new TableField[] { KpirEntry.KPIR_ENTRY.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> MONTH_SUMMARY__FK_BILLING_PERIOD = Internal.createForeignKey(MonthSummary.MONTH_SUMMARY, DSL.name("fk_billing_period"), new TableField[] { MonthSummary.MONTH_SUMMARY.BILLING_PERIOD_ID }, Keys.BILLING_PERIOD_PKEY, new TableField[] { BillingPeriod.BILLING_PERIOD.ID }, true);
    public static final ForeignKey<Record, Record> NODRIGEN_BANK_ACCOUNT_BALANCE__FK_BANK_ACCOUNT = Internal.createForeignKey(NodrigenBankAccountBalance.NODRIGEN_BANK_ACCOUNT_BALANCE, DSL.name("fk_bank_account"), new TableField[] { NodrigenBankAccountBalance.NODRIGEN_BANK_ACCOUNT_BALANCE.BANK_ACCOUNT_ID }, Keys.BANK_ACCOUNT_PKEY, new TableField[] { BankAccount.BANK_ACCOUNT.ID }, true);
    public static final ForeignKey<Record, Record> NODRIGEN_TRANSACTION__FK_BANK_ACCOUNT = Internal.createForeignKey(NodrigenTransaction.NODRIGEN_TRANSACTION, DSL.name("fk_bank_account"), new TableField[] { NodrigenTransaction.NODRIGEN_TRANSACTION.BANK_ACCOUNT_ID }, Keys.BANK_ACCOUNT_PKEY, new TableField[] { BankAccount.BANK_ACCOUNT.ID }, true);
    public static final ForeignKey<Record, Record> NODRIGEN_TRANSACTION__FK_CREDIT_TRANSACTION = Internal.createForeignKey(NodrigenTransaction.NODRIGEN_TRANSACTION, DSL.name("fk_credit_transaction"), new TableField[] { NodrigenTransaction.NODRIGEN_TRANSACTION.CREDIT_TRANSACTION_ID }, Keys.FINANCIAL_TRANSACTION_PKEY, new TableField[] { FinancialTransaction.FINANCIAL_TRANSACTION.ID }, true);
    public static final ForeignKey<Record, Record> NODRIGEN_TRANSACTION__FK_DEBIT_TRANSACTION = Internal.createForeignKey(NodrigenTransaction.NODRIGEN_TRANSACTION, DSL.name("fk_debit_transaction"), new TableField[] { NodrigenTransaction.NODRIGEN_TRANSACTION.DEBIT_TRANSACTION_ID }, Keys.FINANCIAL_TRANSACTION_PKEY, new TableField[] { FinancialTransaction.FINANCIAL_TRANSACTION.ID }, true);
    public static final ForeignKey<Record, Record> NODRIGEN_TRANSACTION__FK_RESET_IN_TRANSATION = Internal.createForeignKey(NodrigenTransaction.NODRIGEN_TRANSACTION, DSL.name("fk_reset_in_transation"), new TableField[] { NodrigenTransaction.NODRIGEN_TRANSACTION.RESET_IN_ID }, Keys.NODRIGEN_TRANSACTION_PKEY, new TableField[] { NodrigenTransaction.NODRIGEN_TRANSACTION.ID }, true);
    public static final ForeignKey<Record, Record> PAGE_VERSION__FK_CHECKER_TASK = Internal.createForeignKey(PageVersion.PAGE_VERSION, DSL.name("fk_checker_task"), new TableField[] { PageVersion.PAGE_VERSION.TASK_ID }, Keys.CHECKER_TASK_PKEY, new TableField[] { CheckerTask.CHECKER_TASK.ID }, true);
    public static final ForeignKey<Record, Record> PAGE_VERSION_CONTENT__FK_PAGE_VERSION = Internal.createForeignKey(PageVersionContent.PAGE_VERSION_CONTENT, DSL.name("fk_page_version"), new TableField[] { PageVersionContent.PAGE_VERSION_CONTENT.PAGE_VERSION_ID }, Keys.PAGE_VERSION_PKEY, new TableField[] { PageVersion.PAGE_VERSION.ID }, true);
    public static final ForeignKey<Record, Record> PAGE_VERSION_ELEMENTS_ADDED__FK_PAGE_VERSION = Internal.createForeignKey(PageVersionElementsAdded.PAGE_VERSION_ELEMENTS_ADDED, DSL.name("fk_page_version"), new TableField[] { PageVersionElementsAdded.PAGE_VERSION_ELEMENTS_ADDED.PAGE_VERSION_ID }, Keys.PAGE_VERSION_PKEY, new TableField[] { PageVersion.PAGE_VERSION.ID }, true);
    public static final ForeignKey<Record, Record> PAGE_VERSION_ELEMENTS_REMOVED__FK_PAGE_VERSION = Internal.createForeignKey(PageVersionElementsRemoved.PAGE_VERSION_ELEMENTS_REMOVED, DSL.name("fk_page_version"), new TableField[] { PageVersionElementsRemoved.PAGE_VERSION_ELEMENTS_REMOVED.PAGE_VERSION_ID }, Keys.PAGE_VERSION_PKEY, new TableField[] { PageVersion.PAGE_VERSION.ID }, true);
    public static final ForeignKey<Record, Record> PERFORMED_SERVICE__FK_CLIENT = Internal.createForeignKey(PerformedService.PERFORMED_SERVICE, DSL.name("fk_client"), new TableField[] { PerformedService.PERFORMED_SERVICE.CLIENT_ID }, Keys.CLIENT_PKEY, new TableField[] { Client.CLIENT.ID }, true);
    public static final ForeignKey<Record, Record> PERFORMED_SERVICE__FK_DOMAIN = Internal.createForeignKey(PerformedService.PERFORMED_SERVICE, DSL.name("fk_domain"), new TableField[] { PerformedService.PERFORMED_SERVICE.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> PERFORMED_SERVICE__FK_SERVICE = Internal.createForeignKey(PerformedService.PERFORMED_SERVICE, DSL.name("fk_service"), new TableField[] { PerformedService.PERFORMED_SERVICE.SERVICE_ID }, Keys.SERVICE_PKEY, new TableField[] { Service.SERVICE.ID }, true);
    public static final ForeignKey<Record, Record> PERFORMED_SERVICE_PAYMENT__FK_CLIENT_PAYMENT = Internal.createForeignKey(PerformedServicePayment.PERFORMED_SERVICE_PAYMENT, DSL.name("fk_client_payment"), new TableField[] { PerformedServicePayment.PERFORMED_SERVICE_PAYMENT.CLIENT_PAYMENT_ID }, Keys.CLIENT_PAYMENT_PKEY, new TableField[] { ClientPayment.CLIENT_PAYMENT.ID }, true);
    public static final ForeignKey<Record, Record> PERFORMED_SERVICE_PAYMENT__FK_PERFORMED_SERVICE = Internal.createForeignKey(PerformedServicePayment.PERFORMED_SERVICE_PAYMENT, DSL.name("fk_performed_service"), new TableField[] { PerformedServicePayment.PERFORMED_SERVICE_PAYMENT.PERFORMED_SERVICE_ID }, Keys.PERFORMED_SERVICE_PKEY, new TableField[] { PerformedService.PERFORMED_SERVICE.ID }, true);
    public static final ForeignKey<Record, Record> PIGGY_BANK__FK_DOMAIN = Internal.createForeignKey(PiggyBank.PIGGY_BANK, DSL.name("fk_domain"), new TableField[] { PiggyBank.PIGGY_BANK.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> SAVE_RESULT_STEP_EMAIL_CCS__FK_CHECKER_STEP = Internal.createForeignKey(SaveResultStepEmailCcs.SAVE_RESULT_STEP_EMAIL_CCS, DSL.name("fk_checker_step"), new TableField[] { SaveResultStepEmailCcs.SAVE_RESULT_STEP_EMAIL_CCS.ID }, Keys.CHECKER_STEP_PKEY, new TableField[] { CheckerStep.CHECKER_STEP.ID }, true);
    public static final ForeignKey<Record, Record> SAVE_RESULT_STEP_EMAIL_TOS__FK_CHECKER_STEP = Internal.createForeignKey(SaveResultStepEmailTos.SAVE_RESULT_STEP_EMAIL_TOS, DSL.name("fk_checker_step"), new TableField[] { SaveResultStepEmailTos.SAVE_RESULT_STEP_EMAIL_TOS.ID }, Keys.CHECKER_STEP_PKEY, new TableField[] { CheckerStep.CHECKER_STEP.ID }, true);
    public static final ForeignKey<Record, Record> SERVICE__FK_DOMAIN = Internal.createForeignKey(Service.SERVICE, DSL.name("fk_domain"), new TableField[] { Service.SERVICE.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> SYR__FK_COUNTRY = Internal.createForeignKey(Syr.SYR, DSL.name("fk_country"), new TableField[] { Syr.SYR.COUNTRY_ID }, Keys.COUNTRY_PKEY, new TableField[] { Country.COUNTRY.ID }, true);
    public static final ForeignKey<Record, Record> TASK__FK_INTELLECTUAL_PROPERTY = Internal.createForeignKey(Task.TASK, DSL.name("fk_intellectual_property"), new TableField[] { Task.TASK.INTELLECTUAL_PROPERTY_ID }, Keys.INTELLECTUAL_PROPERTY_PKEY, new TableField[] { IntellectualProperty.INTELLECTUAL_PROPERTY.ID }, true);
    public static final ForeignKey<Record, Record> TASK_ATTACHMENTS__FK_TASK = Internal.createForeignKey(TaskAttachments.TASK_ATTACHMENTS, DSL.name("fk_task"), new TableField[] { TaskAttachments.TASK_ATTACHMENTS.TASK_ID }, Keys.TASK_PKEY, new TableField[] { Task.TASK.ID }, true);
    public static final ForeignKey<Record, Record> TIME_RECORD__FK_DOMAIN = Internal.createForeignKey(TimeRecord.TIME_RECORD, DSL.name("fk_domain"), new TableField[] { TimeRecord.TIME_RECORD.DOMAIN_ID }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.ID }, true);
    public static final ForeignKey<Record, Record> TIME_RECORD__FK_TASK = Internal.createForeignKey(TimeRecord.TIME_RECORD, DSL.name("fk_task"), new TableField[] { TimeRecord.TIME_RECORD.TASK_ID }, Keys.TASK_PKEY, new TableField[] { Task.TASK.ID }, true);
}
