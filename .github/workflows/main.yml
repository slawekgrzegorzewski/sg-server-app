name: deploy app

on:
  push:
    branches:
      - master
  workflow_dispatch:
    
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'zulu'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      - name: Build with Gradle Wrapper
        run: ./gradlew clean build infrastructureRpi4
        env:
          SG_DB_URL: ${{ secrets.SG_DB_URL }}
          SG_DB_PASSWORD: ${{ secrets.SG_DB_PASSWORD }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          #	role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          #	role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 1200
          role-session-name: MySessionName
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}
          mask-password: "true" # see: https://github.com/aws-actions/amazon-ecr-login#docker-credentials
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: backend
          IMAGE_TAG: latest-rpi4
        run: |
          docker buildx build . -f docker/production_home/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --platform linux/arm64 --push
      - name: Build, tag, and push debug image to Amazon ECR
        id: build-publish-debug
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: backend
          IMAGE_TAG: latest-debug-rpi4
        run: |
          docker buildx build . -f docker/production_home/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --platform linux/arm64 --push
    - name: move dockerRpi4.zip to main folder
      run: |
        mv build/distributions/dockerRpi4.zip .
    - name: copy dockerRpi4.zip via ssh password
      uses: appleboy/scp-action@master
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: 22
        source: "dockerRpi4.zip"
        target: "/home/$SSH_USER/Application"
    - name: unpack and deploy application files
      uses: appleboy/ssh-action@master
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: 22
        script: |
          cd /home/$SSH_USER/Application
          unzip dockerRpi4.zip -d tmp
          cd tmp/setup && dos2unix deploy_files.sh]
          chmod +x deploy_files.sh
          ./deploy_files.sh
          cd /home/$SSH_USER/Application/management
          ./start.sh
