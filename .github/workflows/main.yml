name: deploy app

on:
  push:
    branches:
      - master
  workflow_dispatch:
    
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    container: ubuntu:24.04
    services:
      postgres:
        image: postgres:15.6
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
        volumes:
          - .github/db/init-build-postgres.sh:/docker-entrypoint-initdb.d/init-build-postgres.sh
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'zulu'
      - name: test
        run: |
          pwd
          ls -al
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      - name: create accounant database in postgres
        run: |
          CONTAINER_ID=$(docker ps -f name=postgres --quiet)
          docker exec -it $CONTAINER_ID psql -h localhost -p 5432 -U postgres -w postgres -c 'CREATE DATABASE accountant;'
      - name: Build with Gradle Wrapper
        run: ./gradlew migrateLocal build infrastructureRpi4
        env:
          SG_DB_URL: "jdbc:postgresql://postgres:5432/accountant"
          SG_DB_PASSWORD: postgres
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          role-duration-seconds: 1200
          role-session-name: MySessionName
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}
          mask-password: "true" # see: https://github.com/aws-actions/amazon-ecr-login#docker-credentials
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: backend
        run: |
          docker buildx build . -f docker/production_home/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:latest-rpi4 --platform linux/arm64 --push
          docker buildx build . -f docker/production_home/Dockerfile-debug -t $ECR_REGISTRY/$ECR_REPOSITORY:latest-debug-rpi4 --platform linux/arm64 --push
          mv build/distributions/dockerRpi4.zip .
      - name: copy dockerRpi4.zip via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          source: dockerRpi4.zip
          target: /home/${{ secrets.SSH_USER }}/Application
      - name: unpack and deploy application files
        uses: appleboy/ssh-action@master
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            cd /home/${{ secrets.SSH_USER }}/Application
            unzip dockerRpi4.zip -d tmp
            cd tmp/setup && dos2unix deploy_files.sh
            chmod +x deploy_files.sh
            ./deploy_files.sh
            cd /home/${{ secrets.SSH_USER }}/Application/management
            docker service scale app_app=0
            docker service scale app_app=1
